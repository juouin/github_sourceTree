
  원격저장소(remote) : 자신의 로컬저장소를 연결하여 백업(지금까지의 history)을 하는 용도
  
  gitlab :  자사의 서버를 만들고, 그 서버에 직접 솔루션을 구성해서 원격저장소로 사용하는것이 보안적 측면에서 좋다.
  yobi : gitlab과 비슷하지만, 국내에서 제작하기때문에, 한글로 볼수있다는점이 장점
  github : 원격저장소를 만들어서, 오픈소스를 활용한다?
  
  
  //GitHub 사용법
  1. 로그인
  2. new repository 클릭후 'repository name'입력 (저장소이름) - Public -Create
  3. 상단 : 로컬저장소에서 원격저장소로 접근할수있는 주소를 제공해준다
  	 중단~하단 : '명령어'를 사용해서 사용하는방법 (소스트리같이 GUI를 사용하는경우에는 해당하지않는다)
  
  4. 소스트리에서 remote클릭 : 로컬저장소(소스트리)에 연결되어있는 원격저장소의 목록을 보여주거나 추가,편집할수있다
  5. Add클릭	- URL/Path에 깃허브에서 제공해준 주소를 복붙(Https / SSH 두가지가있는데 일단은 Https선택)
  6. 처음연결시 : 이 연결이 기준이 되므로 Remote name == Default remote를 선택해서 origin상태로 만들어준다 - OK클릭
  7. 소스트리에서 좌측에 Remotes라는 항목에 우리가 추가한 원격저장소가 생긴것을 볼수있다
  
  
    //로컬저장소에서 원격저장소로 데이터보내기
	1. push 버튼누르기(원격저장소로 밀어낸다)
	2. 업로드하려고하는 브랜치를 선택한다. 
	3. 깃허브에 등록이된것을 확인

	//깃허브에 업로드후에 소스트리에서 새로운 커밋을 했을때
	1. 브랜치앞에 origin이 붙어있는게 깃허브의 가장 최신버전
	2. 그냥 브랜치이름만 써있는것은 소스트리의 가장 최신버전 을뜻함
  
	//협업
	원격저장소에있는 파일을 복사해서 새 repository만들기
	1. 제일 상단에 tab추가 - Clone - 원격저장소에서 주소복사해서 붙여넣기
	 - 복제한 원격저장소를 둘 경로를 지정 - clone을 누르면 새탭에 원격저장소에있던 파일이 옮겨짐
	
	Pull : 원격저장소의 내용을 로컬로 가져오는 작업
	만약에 Pull을 하지않고 Push를 하려고하면 에러가난다.
	원격저장소에있는 내용을 가져오기도 전에 푸시를 하면 에러
	(무조건 최신 데이터를 가져온후에 작업을 해서 보내야한다)
	원격저장소에서 최신데이터를 가져와서 작업을 하고있는도중에 최신데이터가 갱신이되었다면
	pull로 적용시킨후에 작업을 계속하면됨
	
	
	pull을 하면 원격저장소에있는내용과 , 내가 작성한내용이 자동으로 병합이되서 하나의 버전을만듬
	Fetch를 하면 자동병합이 되지않고 수동으로 선택할지말지 정할수있다

----------------------------------------------------------------------------------------------------
심화과정

<비교, 병합 외부도구 연결>
diff : differnce의 약자로 파일과 파일의 차이점을 비교해주는 역할을하는 소프트웨어를 의미한다

-종류(참고자료 : 위키피디아에 diff 도구들의 비교자료)-
beyond compare : 강력한 기능을 가지고있지만 유료
(Confilcts가 발생했을때? 두개의 파일을 비교해서 다른부분을 쉽게 표현해준다. 보통 이런식으로 비교나 병합을 도와주는 도구)
병합할때 : 만약 병합했을때 Confilcts가 발생했다면, 이 도구는 총3가지의 에시를 보여줌.(local, 공백, remote)
		원하는 예시를 선택하면 그에 맞도록 코드를 그자리에서 선택할수있고, 직접 코드를 그자리에서 수정할수있다. 


<stash>
-번역하면 안전한곳에 보관해두다. => 아직 끝나지 않은작업을 안전한곳에 보관한다
 => 아직 커밋하지않은 내용을 임시로 저장하는 기능
1. 아직 커밋을 하지않았다면 Unstaged files에 존재할것이다. 그 상태에서 stash를 클릭
2. 무엇을 입력하라고 요구받는데,  그냥 기억하기 쉽게 메세지를 남기라는 소리이므로 써도 되고 안써도됨
3. 커밋되지않은 파일들은 좌측에 stash라는 태그에 추가가되는데, 나중에 작업이 다 끝나고 그것을 우클릭으로 apply를 누르면
	임시저장된 파일들과 stash이후 작업했던 파일들이 병합이된다. (앞에서와 마찬가지로 같은줄에 다른코드가 있으면 에러남)
	
	
<Tag>
중요한 버전에 주석이나 태그를 남기고싶을때 사용
우클릭 - tag로 사용해도 되고 (이게 더 편한듯)
상단에 tag버튼으로 사용해도됨 (커밋 아이디를 지정해야함)	

- 브랜치를 지정할때도 사용가능 :  브랜치생성에서 Specifided commit에 지정했던 태그를 입력하면 그 태그를 기준으로 브랜치가 생성됨

- push를 할때 태그는 push가 안된다. => push할때 제일 하단에 Push all tags를 체크해주어야한다
  