
  원격저장소(remote) : 자신의 로컬저장소를 연결하여 백업(지금까지의 history)을 하는 용도
  
  gitlab :  자사의 서버를 만들고, 그 서버에 직접 솔루션을 구성해서 원격저장소로 사용하는것이 보안적 측면에서 좋다.
  yobi : gitlab과 비슷하지만, 국내에서 제작하기때문에, 한글로 볼수있다는점이 장점
  github : 원격저장소를 만들어서, 오픈소스를 활용한다?
  
  
  //GitHub 사용법
  1. 로그인
  2. new repository 클릭후 'repository name'입력 (저장소이름) - Public -Create
  3. 상단 : 로컬저장소에서 원격저장소로 접근할수있는 주소를 제공해준다
  	 중단~하단 : '명령어'를 사용해서 사용하는방법 (소스트리같이 GUI를 사용하는경우에는 해당하지않는다)
  
  4. 소스트리에서 remote클릭 : 로컬저장소(소스트리)에 연결되어있는 원격저장소의 목록을 보여주거나 추가,편집할수있다
  5. Add클릭	- URL/Path에 깃허브에서 제공해준 주소를 복붙(Https / SSH 두가지가있는데 일단은 Https선택)
  6. 처음연결시 : 이 연결이 기준이 되므로 Remote name == Default remote를 선택해서 origin상태로 만들어준다 - OK클릭
  7. 소스트리에서 좌측에 Remotes라는 항목에 우리가 추가한 원격저장소가 생긴것을 볼수있다
  
  
    //로컬저장소에서 원격저장소로 데이터보내기
	1. push 버튼누르기(원격저장소로 밀어낸다)
	2. 업로드하려고하는 브랜치를 선택한다. 
	3. 깃허브에 등록이된것을 확인

	//깃허브에 업로드후에 소스트리에서 새로운 커밋을 했을때
	1. 브랜치앞에 origin이 붙어있는게 깃허브의 가장 최신버전
	2. 그냥 브랜치이름만 써있는것은 소스트리의 가장 최신버전 을뜻함
  
	//협업
	원격저장소에있는 파일을 복사해서 새 repository만들기
	1. 제일 상단에 tab추가 - Clone - 원격저장소에서 주소복사해서 붙여넣기
	 - 복제한 원격저장소를 둘 경로를 지정 - clone을 누르면 새탭에 원격저장소에있던 파일이 옮겨짐
	
	Pull : 원격저장소의 내용을 로컬로 가져오는 작업
	만약에 Pull을 하지않고 Push를 하려고하면 에러가난다.
	원격저장소에있는 내용을 가져오기도 전에 푸시를 하면 에러
	(무조건 최신 데이터를 가져온후에 작업을 해서 보내야한다)
	원격저장소에서 최신데이터를 가져와서 작업을 하고있는도중에 최신데이터가 갱신이되었다면
	pull로 적용시킨후에 작업을 계속하면됨
	
	
	pull을 하면 원격저장소에있는내용과 , 내가 작성한내용이 자동으로 병합이되서 하나의 버전을만듬
	Fetch를 하면 자동병합이 되지않고 수동으로 선택할지말지 정할수있다


  
  